// Handle /summary command (show daily collection summary)
export const handleSummaryCommand = (bot) => {
    bot.onText(/\/summary(?:\s+(\d{4}-\d{2}-\d{2}))?/, async (msg, match) => {
        const chatId = msg.chat.id;
        const { getYesterdayDate, sendDailySummaryToTelegram } = await import('../reports/index.js');
        const targetDate = match[1] || getYesterdayDate(); // Default to yesterday if no date provided
        
        await bot.sendMessage(chatId, `üìä –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –∑–≤—ñ—Ç—É —ñ–Ω–∫–∞—Å–∞—Ü—ñ—ó –¥–ª—è ${targetDate}...`);
        
        try {
            await sendDailySummaryToTelegram(bot, chatId, targetDate);
        } catch (error) {
            await bot.sendMessage(chatId, `‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—É: ${error.message}`);
        }
    });
};

// Handle /summary_today command (show today's summary)
export const handleSummaryTodayCommand = (bot) => {
    bot.onText(/\/summary_today/, async (msg) => {
        const chatId = msg.chat.id;
        const { getTodayDate, sendDailySummaryToTelegram } = await import('../reports/index.js');
        const today = getTodayDate();
        
        await bot.sendMessage(chatId, `üìä –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—å–æ–≥–æ –∑–≤—ñ—Ç—É —ñ–Ω–∫–∞—Å–∞—Ü—ñ—ó –¥–ª—è ${today}...`);
        
        try {
            await sendDailySummaryToTelegram(bot, chatId, today);
        } catch (error) {
            await bot.sendMessage(chatId, `‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—É: ${error.message}`);
        }
    });
};

// Handle /send_summary_all command (send summary to all workers)
export const handleSendSummaryAllCommand = (bot) => {
    bot.onText(/\/send_summary_all(?:\s+(\d{4}-\d{2}-\d{2}))?/, async (msg, match) => {
        const chatId = msg.chat.id;
        const { getYesterdayDate, sendDailySummaryToAllWorkers } = await import('../reports/index.js');
        const targetDate = match[1] || getYesterdayDate();
        
        await bot.sendMessage(chatId, `üìä –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –∑–≤—ñ—Ç—É —ñ–Ω–∫–∞—Å–∞—Ü—ñ—ó –¥–ª—è ${targetDate} –≤—Å—ñ–º –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞–º...`);
        
        try {
            const result = await sendDailySummaryToAllWorkers(bot, targetDate);
            await bot.sendMessage(chatId, `‚úÖ –ó–≤—ñ—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ ${result.successfulSends}/${result.totalWorkers} –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞–º —É—Å–ø—ñ—à–Ω–æ`);
        } catch (error) {
            await bot.sendMessage(chatId, `‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–≤—ñ—Ç—É –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞–º: ${error.message}`);
        }
    });
};

// Handle /force_summary command (force send summary for today)
export const handleForceSummaryCommand = (bot) => {
    bot.onText(/\/force_summary/, async (msg) => {
        const chatId = msg.chat.id;
        const { getTodayDate, sendDailySummaryToTelegram } = await import('../reports/index.js');
        const today = getTodayDate();
        
        await bot.sendMessage(chatId, 'üìä –ü—Ä–∏–º—É—Å–æ–≤–µ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –∑–≤—ñ—Ç—É –¥–ª—è —Å—å–æ–≥–æ–¥–Ω—ñ...');
        
        try {
            await sendDailySummaryToTelegram(bot, chatId, today);
            await bot.sendMessage(chatId, '‚úÖ –©–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ');
        } catch (error) {
            await bot.sendMessage(chatId, `‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–≤—ñ—Ç—É: ${error.message}`);
        }
    });
};
