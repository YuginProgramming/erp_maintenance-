// Handle /report_previous_day command (send report for previous day)
export const handleReportPreviousDayCommand = (bot) => {
    bot.onText(/\/report_previous_day/, async (msg) => {
        const chatId = msg.chat.id;
        const { getPreviousDayDate, sendDailySummaryToTelegram } = await import('../reports/index.js');
        const previousDay = getPreviousDayDate();
        
        await bot.sendMessage(chatId, `üìä –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤—ñ—Ç—É —ñ–Ω–∫–∞—Å–∞—Ü—ñ—ó –∑–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –¥–µ–Ω—å (${previousDay})...`);
        
        try {
            await sendDailySummaryToTelegram(bot, chatId, previousDay);
            await bot.sendMessage(chatId, '‚úÖ –ó–≤—ñ—Ç –∑–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –¥–µ–Ω—å —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ');
        } catch (error) {
            await bot.sendMessage(chatId, `‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–≤—ñ—Ç—É: ${error.message}`);
        }
    });
};

// Handle /report_previous_week command (send report for previous week)
export const handleReportPreviousWeekCommand = (bot) => {
    bot.onText(/\/report_previous_week/, async (msg) => {
        const chatId = msg.chat.id;
        const { getPreviousWeekRange, sendWeeklySummaryToTelegram } = await import('../reports/index.js');
        const { startDate, endDate } = getPreviousWeekRange();
        
        await bot.sendMessage(chatId, `üìä –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–∏–∂–Ω–µ–≤–æ–≥–æ –∑–≤—ñ—Ç—É —ñ–Ω–∫–∞—Å–∞—Ü—ñ—ó –∑–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å (${startDate} - ${endDate})...`);
        
        try {
            await sendWeeklySummaryToTelegram(bot, chatId, startDate, endDate);
            await bot.sendMessage(chatId, '‚úÖ –¢–∏–∂–Ω–µ–≤–∏–π –∑–≤—ñ—Ç —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ');
        } catch (error) {
            await bot.sendMessage(chatId, `‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ç–∏–∂–Ω–µ–≤–æ–≥–æ –∑–≤—ñ—Ç—É: ${error.message}`);
        }
    });
};

// Handle /report_previous_month command (send report for previous month)
export const handleReportPreviousMonthCommand = (bot) => {
    bot.onText(/\/report_previous_month/, async (msg) => {
        const chatId = msg.chat.id;
        const { getPreviousMonth, sendMonthlySummaryToTelegram } = await import('../reports/index.js');
        const { year, month } = getPreviousMonth();
        
        await bot.sendMessage(chatId, `üìä –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –º—ñ—Å—è—á–Ω–æ–≥–æ –∑–≤—ñ—Ç—É —ñ–Ω–∫–∞—Å–∞—Ü—ñ—ó –∑–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –º—ñ—Å—è—Ü—å (${month}/${year})...`);
        
        try {
            await sendMonthlySummaryToTelegram(bot, chatId, year, month);
            await bot.sendMessage(chatId, '‚úÖ –ú—ñ—Å—è—á–Ω–∏–π –∑–≤—ñ—Ç —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ');
        } catch (error) {
            await bot.sendMessage(chatId, `‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –º—ñ—Å—è—á–Ω–æ–≥–æ –∑–≤—ñ—Ç—É: ${error.message}`);
        }
    });
};

// Handle /report_week command (send report for current week)
export const handleReportWeekCommand = (bot) => {
    bot.onText(/\/report_week/, async (msg) => {
        const chatId = msg.chat.id;
        const { sendWeeklySummaryToTelegram } = await import('../reports/index.js');
        
        // Calculate current week (Monday to Sunday)
        const today = new Date();
        const dayOfWeek = today.getDay();
        const monday = new Date(today);
        monday.setDate(today.getDate() - dayOfWeek + (dayOfWeek === 0 ? -6 : 1)); // Monday
        
        const sunday = new Date(monday);
        sunday.setDate(monday.getDate() + 6); // Sunday
        
        const startDate = monday.toISOString().split('T')[0];
        const endDate = sunday.toISOString().split('T')[0];
        
        await bot.sendMessage(chatId, `üìä –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–∏–∂–Ω–µ–≤–æ–≥–æ –∑–≤—ñ—Ç—É —ñ–Ω–∫–∞—Å–∞—Ü—ñ—ó –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å (${startDate} - ${endDate})...`);
        
        try {
            await sendWeeklySummaryToTelegram(bot, chatId, startDate, endDate);
            await bot.sendMessage(chatId, '‚úÖ –¢–∏–∂–Ω–µ–≤–∏–π –∑–≤—ñ—Ç —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ');
        } catch (error) {
            await bot.sendMessage(chatId, `‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ç–∏–∂–Ω–µ–≤–æ–≥–æ –∑–≤—ñ—Ç—É: ${error.message}`);
        }
    });
};

// Handle /report_month command (send report for current month)
export const handleReportMonthCommand = (bot) => {
    bot.onText(/\/report_month/, async (msg) => {
        const chatId = msg.chat.id;
        const { sendMonthlySummaryToTelegram } = await import('../reports/index.js');
        
        const today = new Date();
        const year = today.getFullYear();
        const month = today.getMonth() + 1; // getMonth() returns 0-11
        
        await bot.sendMessage(chatId, `üìä –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –º—ñ—Å—è—á–Ω–æ–≥–æ –∑–≤—ñ—Ç—É —ñ–Ω–∫–∞—Å–∞—Ü—ñ—ó –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å (${month}/${year})...`);
        
        try {
            await sendMonthlySummaryToTelegram(bot, chatId, year, month);
            await bot.sendMessage(chatId, '‚úÖ –ú—ñ—Å—è—á–Ω–∏–π –∑–≤—ñ—Ç —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ');
        } catch (error) {
            await bot.sendMessage(chatId, `‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –º—ñ—Å—è—á–Ω–æ–≥–æ –∑–≤—ñ—Ç—É: ${error.message}`);
        }
    });
};
