// Handle /data_availability command to show what data is available
export const handleDataAvailabilityCommand = (bot) => {
    bot.onText(/\/data_availability/, async (msg) => {
        const chatId = msg.chat.id;
        
        await bot.sendMessage(chatId, 'üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö —ñ–Ω–∫–∞—Å–∞—Ü—ñ—ó...');
        
        try {
            const { sequelize, ensureConnection } = await import('../database/sequelize.js');
            const { Collection } = await import('../database/maintenance-models.js');
            const { Op } = await import('sequelize');
            
            await ensureConnection();
            
            // Get the last 60 days of data availability
            const sixtyDaysAgo = new Date();
            sixtyDaysAgo.setDate(sixtyDaysAgo.getDate() - 60);
            
            const collections = await Collection.findAll({
                where: {
                    date: {
                        [Op.gte]: sixtyDaysAgo.toISOString().split('T')[0]
                    }
                },
                attributes: [
                    [sequelize.fn('DATE', sequelize.col('date')), 'date'],
                    [sequelize.fn('COUNT', sequelize.col('id')), 'count']
                ],
                group: [sequelize.fn('DATE', sequelize.col('date'))],
                order: [[sequelize.fn('DATE', sequelize.col('date')), 'DESC']],
                raw: true
            });
            
            if (collections.length === 0) {
                await bot.sendMessage(chatId, '‚ùå –î–∞–Ω—ñ —ñ–Ω–∫–∞—Å–∞—Ü—ñ—ó –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 60 –¥–Ω—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            } else {
                let message = 'üìä **–ù–∞—è–≤–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö —ñ–Ω–∫–∞—Å–∞—Ü—ñ—ó –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 60 –¥–Ω—ñ–≤:**\n\n';
                collections.slice(0, 20).forEach(collection => {
                    message += `üìÖ ${collection.date}: ${collection.count} –∑–∞–ø–∏—Å—ñ–≤\n`;
                });
                
                if (collections.length > 20) {
                    message += `\n... —Ç–∞ —â–µ ${collections.length - 20} –¥–Ω—ñ–≤ –∑ –¥–∞–Ω–∏–º–∏`;
                }
                
                await bot.sendMessage(chatId, message);
            }
        } catch (error) {
            await bot.sendMessage(chatId, `‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö: ${error.message}`);
        }
    });
};

// Handle /devices_list command to show all devices in database
export const handleDevicesListCommand = (bot) => {
    bot.onText(/\/devices_list/, async (msg) => {
        const chatId = msg.chat.id;
        
        await bot.sendMessage(chatId, 'üì± –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –≤—Å—ñ—Ö –∞–ø–∞—Ä–∞—Ç—ñ–≤...');
        
        try {
            const { sequelize, ensureConnection } = await import('../database/sequelize.js');
            const { Collection } = await import('../database/maintenance-models.js');
            const { Op } = await import('sequelize');
            
            await ensureConnection();
            
            const devices = await Collection.findAll({
                attributes: [
                    [sequelize.fn('DISTINCT', sequelize.col('device_id')), 'device_id'],
                    [sequelize.fn('COUNT', sequelize.col('id')), 'record_count']
                ],
                where: {
                    device_id: {
                        [Op.not]: null
                    }
                },
                group: ['device_id'],
                order: [['device_id', 'ASC']],
                raw: true
            });
            
            if (devices.length === 0) {
                await bot.sendMessage(chatId, '‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –∞–ø–∞—Ä–∞—Ç—É –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö');
                return;
            }
            
            let message = 'üì± **–°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∞–ø–∞—Ä–∞—Ç—ñ–≤ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö:**\n\n';
            devices.forEach((device, index) => {
                message += `${index + 1}. –ê–ø–∞—Ä–∞—Ç ${device.device_id} - ${device.record_count} –∑–∞–ø–∏—Å—ñ–≤\n`;
            });
            
            message += `\nüí° –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /collection [ID] –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–∞–Ω–∏—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–ø–∞—Ä–∞—Ç—É`;
            
            await bot.sendMessage(chatId, message);
            
        } catch (error) {
            await bot.sendMessage(chatId, `‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∞–ø–∞—Ä–∞—Ç—ñ–≤: ${error.message}`);
        }
    });
};

// Handle /completeness_check command (manual trigger for database completeness check)
export const handleCompletenessCheckCommand = (bot) => {
    bot.onText(/\/completeness_check/, async (msg) => {
        const chatId = msg.chat.id;
        await bot.sendMessage(chatId, 'üîÑ –ó–∞–ø—É—Å–∫ —Ä—É—á–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ–≤–Ω–æ—Ç–∏ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö (–ø–æ–ø–µ—Ä–µ–¥–Ω—ñ 30 –¥–Ω—ñ–≤)...');
        
        try {
            const { checkAndFillMissingData } = await import('../database-completeness-checker.js');
            const result = await checkAndFillMissingData();
            if (result.success) {
                await bot.sendMessage(chatId, `‚úÖ **–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–≤–Ω–æ—Ç–∏ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç–∏:\n‚Ä¢ –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: ${result.duration}—Å\n‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ –¥–∞—Ç: ${result.datesChecked}\n‚Ä¢ –û–±—Ä–æ–±–ª–µ–Ω–æ –¥–∞—Ç: ${result.datesProcessed}\n‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥–∞—Ç: ${result.datesSkipped}\n‚Ä¢ –í—Å—å–æ–≥–æ –∑–∞–ø–∏—Å—ñ–≤ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: ${result.totalSaved}`);
            } else {
                await bot.sendMessage(chatId, `‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ–≤–Ω–æ—Ç–∏: ${result.error}`);
            }
        } catch (error) {
            await bot.sendMessage(chatId, `‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ–≤–Ω–æ—Ç–∏: ${error.message}`);
        }
    });
};
