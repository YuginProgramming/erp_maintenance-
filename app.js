import TelegramBot from 'node-telegram-bot-api';
import dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import { dirname } from 'path';
import { handleMaintenanceCommand, handleMachinesCommand, handleAlertsCommand } from './handlers/maintenance-handler.js';
import { sendDeviceListToTelegram } from './device/device-handler.js';
import { sendDeviceCollectionToTelegram, getDefaultDateRange } from './device/device-collection-handler.js';
import { scheduleDailyCollection, scheduleDailySummary, fetchDailyCollectionData } from './daily-collection-scheduler.js';
import { sendDailySummaryToTelegram, sendDailySummaryToAllWorkers, getYesterdayDate, getTodayDate, checkCurrentCollectionData } from './daily-collection-summary.js';
import { scheduleDailyCompletenessCheck, checkAndFillMissingData } from './database-completeness-checker.js';

dotenv.config();

// Get current directory for ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Initialize bot with your token
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });

// Simple in-memory storage for users
const users = new Map();

// Set bot commands
bot.setMyCommands([
    { command: '/maintenance', description: 'Show maintenance tasks' },
    { command: '/machines', description: 'Show machine status' },
    { command: '/alerts', description: 'Show urgent alerts' },
    { command: '/devices', description: 'Show active devices from API' },
    { command: '/collection', description: 'Show device collection data' },
    { command: '/help', description: 'Show help information' }
]);

// Handle /maintenance command
bot.onText(/\/maintenance/, async (msg) => {
    const chatId = msg.chat.id;
    await handleMaintenanceCommand(bot, chatId);
});

// Handle /machines command
bot.onText(/\/machines/, async (msg) => {
    const chatId = msg.chat.id;
    await handleMachinesCommand(bot, chatId);
});

// Handle /alerts command
bot.onText(/\/alerts/, async (msg) => {
    const chatId = msg.chat.id;
    await handleAlertsCommand(bot, chatId);
});

// Handle /devices command
bot.onText(/\/devices/, async (msg) => {
    const chatId = msg.chat.id;
    await sendDeviceListToTelegram(bot, chatId);
});

// Handle /collection command with parameters
bot.onText(/\/collection(?:\s+(\d+))?/, async (msg, match) => {
    const chatId = msg.chat.id;
    const { startDate, endDate } = getDefaultDateRange();
    
    // If device ID is provided, use it; otherwise use default
    const deviceId = match[1] || '164'; // Default to device 164 (–ë–∞–Ω–¥–µ—Ä–∏, 69)
    
    await sendDeviceCollectionToTelegram(bot, chatId, deviceId, startDate, endDate);
});

// Handle /collection with date range: /collection 164 2025-06-01 2025-06-30
bot.onText(/\/collection\s+(\d+)\s+(\d{4}-\d{2}-\d{2})\s+(\d{4}-\d{2}-\d{2})/, async (msg, match) => {
    const chatId = msg.chat.id;
    const deviceId = match[1];
    const startDate = match[2];
    const endDate = match[3];
    
    await sendDeviceCollectionToTelegram(bot, chatId, deviceId, startDate, endDate);
});

// Handle /fetch_daily command (manual trigger for daily collection fetch)
bot.onText(/\/fetch_daily/, async (msg) => {
    const chatId = msg.chat.id;
    await bot.sendMessage(chatId, 'üîÑ –ó–∞–ø—É—Å–∫ —Ä—É—á–Ω–æ–≥–æ —â–æ–¥–µ–Ω–Ω–æ–≥–æ –∑–±–æ—Ä—É –¥–∞–Ω–∏—Ö —ñ–Ω–∫–∞—Å–∞—Ü—ñ—ó...');
    
    try {
        await fetchDailyCollectionData();
        await bot.sendMessage(chatId, '‚úÖ –©–æ–¥–µ–Ω–Ω–∏–π –∑–±—ñ—Ä –¥–∞–Ω–∏—Ö —ñ–Ω–∫–∞—Å–∞—Ü—ñ—ó —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    } catch (error) {
        await bot.sendMessage(chatId, `‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —â–æ–¥–µ–Ω–Ω–æ–≥–æ –∑–±–æ—Ä—É –¥–∞–Ω–∏—Ö: ${error.message}`);
    }
});

// Handle /summary command (show daily collection summary)
bot.onText(/\/summary(?:\s+(\d{4}-\d{2}-\d{2}))?/, async (msg, match) => {
    const chatId = msg.chat.id;
    const targetDate = match[1] || getYesterdayDate(); // Default to yesterday if no date provided
    
    await bot.sendMessage(chatId, `üìä –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –∑–≤—ñ—Ç—É —ñ–Ω–∫–∞—Å–∞—Ü—ñ—ó –¥–ª—è ${targetDate}...`);
    
    try {
        await sendDailySummaryToTelegram(bot, chatId, targetDate);
    } catch (error) {
        await bot.sendMessage(chatId, `‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—É: ${error.message}`);
    }
});

// Handle /summary_today command (show today's summary)
bot.onText(/\/summary_today/, async (msg) => {
    const chatId = msg.chat.id;
    const today = getTodayDate();
    
    await bot.sendMessage(chatId, `üìä –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—å–æ–≥–æ –∑–≤—ñ—Ç—É —ñ–Ω–∫–∞—Å–∞—Ü—ñ—ó –¥–ª—è ${today}...`);
    
    try {
        await sendDailySummaryToTelegram(bot, chatId, today);
    } catch (error) {
        await bot.sendMessage(chatId, `‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—É: ${error.message}`);
    }
});

// Handle /send_summary_all command (send summary to all workers)
bot.onText(/\/send_summary_all(?:\s+(\d{4}-\d{2}-\d{2}))?/, async (msg, match) => {
    const chatId = msg.chat.id;
    const targetDate = match[1] || getYesterdayDate();
    
    await bot.sendMessage(chatId, `üìä –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –∑–≤—ñ—Ç—É —ñ–Ω–∫–∞—Å–∞—Ü—ñ—ó –¥–ª—è ${targetDate} –≤—Å—ñ–º –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞–º...`);
    
    try {
        const result = await sendDailySummaryToAllWorkers(bot, targetDate);
        await bot.sendMessage(chatId, `‚úÖ –ó–≤—ñ—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ ${result.successfulSends}/${result.totalWorkers} –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞–º —É—Å–ø—ñ—à–Ω–æ`);
    } catch (error) {
        await bot.sendMessage(chatId, `‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–≤—ñ—Ç—É –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞–º: ${error.message}`);
    }
});

// Handle /check_data command to debug collection data
bot.onText(/\/check_data(?:\s+(\d{4}-\d{2}-\d{2}))?/, async (msg, match) => {
    const chatId = msg.chat.id;
    const targetDate = match[1] || getYesterdayDate();
    
    await bot.sendMessage(chatId, `üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö —ñ–Ω–∫–∞—Å–∞—Ü—ñ—ó –¥–ª—è ${targetDate}...`);
    
    try {
        const collections = await checkCurrentCollectionData(targetDate);
        if (collections.length === 0) {
            await bot.sendMessage(chatId, `‚ùå –î–∞–Ω—ñ —ñ–Ω–∫–∞—Å–∞—Ü—ñ—ó –¥–ª—è ${targetDate} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
        } else {
            await bot.sendMessage(chatId, `‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ ${collections.length} –∑–∞–ø–∏—Å—ñ–≤ —ñ–Ω–∫–∞—Å–∞—Ü—ñ—ó –¥–ª—è ${targetDate}`);
        }
    } catch (error) {
        await bot.sendMessage(chatId, `‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–∞–Ω–∏—Ö: ${error.message}`);
    }
});

// Handle /completeness_check command (manual trigger for database completeness check)
bot.onText(/\/completeness_check/, async (msg) => {
    const chatId = msg.chat.id;
    await bot.sendMessage(chatId, 'üîÑ –ó–∞–ø—É—Å–∫ —Ä—É—á–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ–≤–Ω–æ—Ç–∏ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö (–ø–æ–ø–µ—Ä–µ–¥–Ω—ñ 30 –¥–Ω—ñ–≤)...');
    
    try {
        const result = await checkAndFillMissingData();
        if (result.success) {
            await bot.sendMessage(chatId, `‚úÖ **–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–≤–Ω–æ—Ç–∏ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç–∏:\n‚Ä¢ –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: ${result.duration}—Å\n‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ –¥–∞—Ç: ${result.datesChecked}\n‚Ä¢ –û–±—Ä–æ–±–ª–µ–Ω–æ –¥–∞—Ç: ${result.datesProcessed}\n‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥–∞—Ç: ${result.datesSkipped}\n‚Ä¢ –í—Å—å–æ–≥–æ –∑–∞–ø–∏—Å—ñ–≤ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: ${result.totalSaved}`);
        } else {
            await bot.sendMessage(chatId, `‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ–≤–Ω–æ—Ç–∏: ${result.error}`);
        }
    } catch (error) {
        await bot.sendMessage(chatId, `‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ–≤–Ω–æ—Ç–∏: ${error.message}`);
    }
});

// Handle /help command
bot.onText(/\/help/, async (msg) => {
    const chatId = msg.chat.id;
    const helpMessage = `
üîß **–ë–æ—Ç –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç—ñ–≤ –∑ –≤–æ–¥–æ—é**

**–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:**
/maintenance - –ü–µ—Ä–µ–≥–ª—è–¥ –≤—Å—ñ—Ö –∑–∞–≤–¥–∞–Ω—å –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è
/machines - –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –º–∞—à–∏–Ω —Ç–∞ —Ä—ñ–≤–Ω—è –≤–æ–¥–∏
/alerts - –ü–æ–∫–∞–∑ —Ç–µ—Ä–º—ñ–Ω–æ–≤–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å
/devices - –ü–æ–∫–∞–∑ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∞–ø–∞—Ä–∞—Ç—ñ–≤ –∑ API
/collection - –ü–æ–∫–∞–∑ –¥–∞–Ω–∏—Ö —ñ–Ω–∫–∞—Å–∞—Ü—ñ—ó –∞–ø–∞—Ä–∞—Ç—É (–æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤)
/collection [device_id] - –ü–æ–∫–∞–∑ –¥–∞–Ω–∏—Ö —ñ–Ω–∫–∞—Å–∞—Ü—ñ—ó –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–ø–∞—Ä–∞—Ç—É
/collection [device_id] [start_date] [end_date] - –ü–æ–∫–∞–∑ –¥–∞–Ω–∏—Ö —ñ–Ω–∫–∞—Å–∞—Ü—ñ—ó –∑ –≤–ª–∞—Å–Ω–∏–º –¥—ñ–∞–ø–∞–∑–æ–Ω–æ–º –¥–∞—Ç
/fetch_daily - –†—É—á–Ω–∏–π –∑–∞–ø—É—Å–∫ —â–æ–¥–µ–Ω–Ω–æ–≥–æ –∑–±–æ—Ä—É –¥–∞–Ω–∏—Ö —ñ–Ω–∫–∞—Å–∞—Ü—ñ—ó
/summary - –ü–æ–∫–∞–∑ –≤—á–æ—Ä–∞—à–Ω—å–æ–≥–æ –∑–≤—ñ—Ç—É —ñ–Ω–∫–∞—Å–∞—Ü—ñ—ó
/summary [YYYY-MM-DD] - –ü–æ–∫–∞–∑ –∑–≤—ñ—Ç—É —ñ–Ω–∫–∞—Å–∞—Ü—ñ—ó –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –¥–∞—Ç–∏
/summary_today - –ü–æ–∫–∞–∑ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—å–æ–≥–æ –∑–≤—ñ—Ç—É —ñ–Ω–∫–∞—Å–∞—Ü—ñ—ó
/send_summary_all - –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–≤—ñ—Ç—É –≤—Å—ñ–º –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞–º
/send_summary_all [YYYY-MM-DD] - –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–≤—ñ—Ç—É –≤—Å—ñ–º –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞–º –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –¥–∞—Ç–∏
/check_data - –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö —ñ–Ω–∫–∞—Å–∞—Ü—ñ—ó –∑–∞ –≤—á–æ—Ä–∞
/check_data [YYYY-MM-DD] - –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö —ñ–Ω–∫–∞—Å–∞—Ü—ñ—ó –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –¥–∞—Ç–∏
/completeness_check - –†—É—á–Ω–∏–π –∑–∞–ø—É—Å–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ–≤–Ω–æ—Ç–∏ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö (–ø–æ–ø–µ—Ä–µ–¥–Ω—ñ 30 –¥–Ω—ñ–≤)
/help - –ü–æ–∫–∞–∑ —Ü—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ–ø–æ–º–æ–≥–∏

**–ü—Ä–∏–∫–ª–∞–¥–∏ —ñ–Ω–∫–∞—Å–∞—Ü—ñ—ó:**
/collection - –ê–ø–∞—Ä–∞—Ç –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º (–æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤)
/collection 164 - –ê–ø–∞—Ä–∞—Ç 164 (–æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤)
/collection 164 2025-06-01 2025-06-30 - –ê–ø–∞—Ä–∞—Ç 164 –∑ –≤–ª–∞—Å–Ω–∏–º –¥—ñ–∞–ø–∞–∑–æ–Ω–æ–º –¥–∞—Ç

**–§—É–Ω–∫—Ü—ñ—ó:**
‚Ä¢ –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è
‚Ä¢ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å—É –º–∞—à–∏–Ω
‚Ä¢ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —è–∫—ñ—Å—Ç—å –≤–æ–¥–∏
‚Ä¢ –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–µ—Ö–Ω—ñ–∫—ñ–≤
‚Ä¢ –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –∑–∞–º—ñ–Ω–∏ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
‚Ä¢ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∞–≤–∞—Ä—ñ–π–Ω–∏–π —Ä–µ–º–æ–Ω—Ç
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –∑–±–æ—Ä—É –¥–∞–Ω–∏—Ö —ñ–Ω–∫–∞—Å–∞—Ü—ñ—ó (8:00 –∑–∞ –∫–∏—ó–≤—Å—å–∫–∏–º —á–∞—Å–æ–º)
‚Ä¢ –©–æ–¥–µ–Ω–Ω—ñ –∑–≤—ñ—Ç–∏ —ñ–Ω–∫–∞—Å–∞—Ü—ñ—ó (8:00 –∑–∞ –∫–∏—ó–≤—Å—å–∫–∏–º —á–∞—Å–æ–º) –∑ —Ä–æ–∑–ø–æ–¥—ñ–ª–æ–º –∑–∞ —ñ–Ω–∫–∞—Å–∞—Ç–æ—Ä–∞–º–∏
‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ–≤–Ω–æ—Ç–∏ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö (13:00 –∑–∞ –∫–∏—ó–≤—Å—å–∫–∏–º —á–∞—Å–æ–º) - –∑–∞–±–µ–∑–ø–µ—á—É—î –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö

**–¢–∏–ø–∏ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è:**
üîß –ó–∞–º—ñ–Ω–∞ —Ñ—ñ–ª—å—Ç—Ä–∞
üßπ –û—á–∏—â–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏
üíß –¢–µ—Å—Ç —è–∫–æ—Å—Ç—ñ –≤–æ–¥–∏
üî® –†–µ–º–æ–Ω—Ç –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è
üõ°Ô∏è –ü—Ä–æ—Ñ—ñ–ª–∞–∫—Ç–∏—á–Ω–µ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è
üö® –ê–≤–∞—Ä—ñ–π–Ω–∏–π —Ä–µ–º–æ–Ω—Ç

–ü–æ—Ç—Ä—ñ–±–Ω–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞? –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∫–æ–º–∞–Ω–¥–∏ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è.
    `;

    await bot.sendMessage(chatId, helpMessage, { parse_mode: 'Markdown' });
});

// Error handling
bot.on('error', (error) => {
    console.error('Bot error:', error);
});

bot.on('polling_error', (error) => {
    if (error.code === 'ETELEGRAM' && error.response && error.response.body && error.response.body.description && error.response.body.description.includes('Conflict')) {
        console.error('‚ùå Bot conflict detected: Another instance is running');
        console.error('üí° Solution: Stop other bot instances and restart this one');
        console.error('üí° You can use: pkill -f "node app.js" to stop all instances');
        
        // Optionally exit the process after a delay
        setTimeout(() => {
            console.log('üîÑ Attempting to restart bot in 10 seconds...');
        }, 10000);
    } else {
        console.error('Polling error:', error);
    }
});

// Start the bot
console.log('ü§ñ Telegram Bot is starting...');
console.log('üì± Bot is now running. Press Ctrl+C to stop.');

// Set up global bot and default chat ID for daily scheduler
global.bot = bot;
global.defaultChatId = process.env.DEFAULT_CHAT_ID || '269694206'; // Default chat ID for summaries

// Start the daily collection scheduler
console.log('üïê Starting daily collection scheduler...');
scheduleDailyCollection();
console.log('‚úÖ Daily collection scheduler started (runs at 8 AM Kyiv time)');

// Start the daily summary scheduler
console.log('üìä Starting daily summary scheduler...');
scheduleDailySummary();
console.log('‚úÖ Daily summary scheduler started (runs at 8 AM Kyiv time)');

// Start the daily completeness check scheduler
console.log('üîÑ Starting daily completeness check scheduler...');
scheduleDailyCompletenessCheck();
console.log('‚úÖ Daily completeness check scheduler started (runs at 1 PM Kyiv time)');

// Graceful shutdown
process.on('SIGINT', () => {
    console.log('\nüõë Stopping bot...');
    bot.stopPolling();
    process.exit(0);
});

export default bot;
